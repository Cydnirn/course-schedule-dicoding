<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/dicoding/courseschedule/ui/home/HomeActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/dicoding/courseschedule/ui/home/HomeActivity.kt" />
              <option name="originalContent" value="package com.dicoding.courseschedule.ui.home&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.View&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.dicoding.courseschedule.R&#10;import com.dicoding.courseschedule.data.Course&#10;import com.dicoding.courseschedule.ui.list.ListActivity&#10;import com.dicoding.courseschedule.ui.setting.SettingsActivity&#10;import com.dicoding.courseschedule.util.DayName&#10;import com.dicoding.courseschedule.util.QueryType&#10;import com.dicoding.courseschedule.util.timeDifference&#10;import kotlin.jvm.java&#10;&#10;//TODO 15 : Write UI test to validate when user tap Add Course (+) Menu, the AddCourseActivity is displayed&#10;class HomeActivity : AppCompatActivity() {&#10;&#10;    private lateinit var viewModel: HomeViewModel&#10;    private var queryType = QueryType.CURRENT_DAY&#10;&#10;    //TODO 5 : Show nearest schedule in CardHomeView and implement menu action&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_home)&#10;        supportActionBar?.title = resources.getString(R.string.today_schedule)&#10;        val factory = HomeViewModelFactory.createFactory(this)&#10;        viewModel = factory.create(HomeViewModel::class.java)&#10;&#10;        viewModel.getNearestSchedule().observe(this) { course -&gt;&#10;            showNearestSchedule(course)&#10;        }&#10;    }&#10;&#10;    private fun showNearestSchedule(course: Course?) {&#10;        checkQueryType(course)&#10;        course?.apply {&#10;            val dayName = DayName.getByNumber(day)&#10;            val time = String.format(getString(R.string.time_format), dayName, startTime, endTime)&#10;            val remainingTime = timeDifference(day, startTime)&#10;&#10;            val cardHome = findViewById&lt;CardHomeView&gt;(R.id.view_home)&#10;            cardHome.apply { &#10;                setCourseName(courseName)&#10;                setTime(time)&#10;                setRemainingTime(remainingTime)&#10;                setLecturer(lecturer)&#10;                setNote(note)&#10;            }&#10;        }&#10;&#10;        findViewById&lt;TextView&gt;(R.id.tv_empty_home).visibility =&#10;            if (course == null) View.VISIBLE else View.GONE&#10;    }&#10;&#10;    private fun checkQueryType(course: Course?) {&#10;        if (course == null) {&#10;            val newQueryType: QueryType = when (queryType) {&#10;                QueryType.CURRENT_DAY -&gt; QueryType.NEXT_DAY&#10;                QueryType.NEXT_DAY -&gt; QueryType.PAST_DAY&#10;                else -&gt; QueryType.CURRENT_DAY&#10;            }&#10;            viewModel.setQueryType(newQueryType)&#10;            queryType = newQueryType&#10;        }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        menuInflater.inflate(R.menu.menu_home, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        val intent: Intent = when (item.itemId) {&#10;&#10;            R.id.action_settings -&gt; Intent(this, SettingsActivity::class.java)&#10;            R.id.action_add_course -&gt; Intent(this, AddCourseActivity::class.java)&#10;            R.id.action_list -&gt; Intent(this, ListActivity::class.java)&#10;            else -&gt; null&#10;        } ?: return super.onOptionsItemSelected(item)&#10;        return true&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.dicoding.courseschedule.ui.home&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.View&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.dicoding.courseschedule.R&#10;import com.dicoding.courseschedule.data.Course&#10;import com.dicoding.courseschedule.ui.list.ListActivity&#10;import com.dicoding.courseschedule.ui.setting.SettingsActivity&#10;import com.dicoding.courseschedule.util.DayName&#10;import com.dicoding.courseschedule.util.QueryType&#10;import com.dicoding.courseschedule.util.timeDifference&#10;import kotlin.jvm.java&#10;&#10;//TODO 15 : Write UI test to validate when user tap Add Course (+) Menu, the AddCourseActivity is displayed&#10;class HomeActivity : AppCompatActivity() {&#10;&#10;    private lateinit var viewModel: HomeViewModel&#10;    private var queryType = QueryType.CURRENT_DAY&#10;&#10;    //TODO 5 : Show nearest schedule in CardHomeView and implement menu action&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_home)&#10;        supportActionBar?.title = resources.getString(R.string.today_schedule)&#10;        val factory = HomeViewModelFactory.createFactory(this)&#10;        viewModel = factory.create(HomeViewModel::class.java)&#10;&#10;        viewModel.getNearestSchedule().observe(this) { course -&gt;&#10;            showNearestSchedule(course)&#10;        }&#10;    }&#10;&#10;    private fun showNearestSchedule(course: Course?) {&#10;        checkQueryType(course)&#10;        course?.apply {&#10;            val dayName = DayName.getByNumber(day)&#10;            val time = String.format(getString(R.string.time_format), dayName, startTime, endTime)&#10;            val remainingTime = timeDifference(day, startTime)&#10;&#10;            val cardHome = findViewById&lt;CardHomeView&gt;(R.id.view_home)&#10;            cardHome.apply { &#10;                setCourseName(courseName)&#10;                setTime(time)&#10;                setRemainingTime(remainingTime)&#10;                setLecturer(lecturer)&#10;                setNote(note)&#10;            }&#10;        }&#10;&#10;        findViewById&lt;TextView&gt;(R.id.tv_empty_home).visibility =&#10;            if (course == null) View.VISIBLE else View.GONE&#10;    }&#10;&#10;    private fun checkQueryType(course: Course?) {&#10;        if (course == null) {&#10;            val newQueryType: QueryType = when (queryType) {&#10;                QueryType.CURRENT_DAY -&gt; QueryType.NEXT_DAY&#10;                QueryType.NEXT_DAY -&gt; QueryType.PAST_DAY&#10;                else -&gt; QueryType.CURRENT_DAY&#10;            }&#10;            viewModel.setQueryType(newQueryType)&#10;            queryType = newQueryType&#10;        }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        menuInflater.inflate(R.menu.menu_home, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        val intent: Intent = when (item.itemId) {&#10;&#10;            R.id.action_settings -&gt; Intent(this, SettingsActivity::class.java)&#10;            R.id.action_add_course -&gt; Intent(this, AddCourseActivity::class.java)&#10;            R.id.action_list -&gt; Intent(this, ListActivity::class.java)&#10;            else -&gt; null&#10;        } ?: return super.onOptionsItemSelected(item)&#10;        return true&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>